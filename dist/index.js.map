{
  "version": 3,
  "sources": ["../lib/initialize_array_views.js", "../lib/reshape_strategy.js", "../lib/increment_offsets.js", "../lib/set_view_offsets.js", "../lib/offsets.js", "../lib/2d_blocked.js", "../lib/3d_blocked.js", "../lib/4d_blocked.js", "../lib/5d_blocked.js", "../lib/6d_blocked.js", "../lib/7d_blocked.js", "../lib/8d_blocked.js", "../lib/9d_blocked.js", "../lib/10d_blocked.js", "../lib/0d.js", "../lib/1d.js", "../lib/2d.js", "../lib/3d.js", "../lib/4d.js", "../lib/5d.js", "../lib/6d.js", "../lib/7d.js", "../lib/8d.js", "../lib/9d.js", "../lib/10d.js", "../lib/nd.js", "../lib/main.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Initialize ndarray-like objects for representing zero-dimensional sub-array views of the output and ancillary ndarray arguments.\n*\n* ## Notes\n*\n* -   This function ignores the first ndarray-like object, which is assumed to be the input ndarray.\n* -   This function mutates the provided output array.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @param {Array<Object>} out - output array\n* @returns {Array<Object>} output array\n*/\nfunction initializeViews( arrays, out ) {\n\tvar v;\n\tvar i;\n\n\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\tv = arrays[ i ];\n\t\tout.push({\n\t\t\t'dtype': v.dtype,\n\t\t\t'data': v.data,\n\t\t\t'shape': [],\n\t\t\t'strides': [ 0 ],\n\t\t\t'offset': v.offset,\n\t\t\t'order': v.order\n\t\t});\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = initializeViews;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar iterationOrder = require( '@stdlib/ndarray-base-iteration-order' );\nvar minmaxViewBufferIndex = require( '@stdlib/ndarray-base-minmax-view-buffer-index' ).assign;\nvar ndarraylike2object = require( '@stdlib/ndarray-base-ndarraylike2object' );\nvar assign = require( '@stdlib/ndarray-base-assign' );\nvar ndarraylike2ndarray = require( '@stdlib/ndarray-base-ndarraylike2ndarray' );\nvar emptyLike = require( '@stdlib/ndarray-base-empty-like' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns an input ndarray.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @returns {ndarrayLike} input ndarray\n*/\nfunction identity( x ) {\n\treturn x;\n}\n\n/**\n* Broadcasts a zero-dimensional ndarray to a one-dimensional ndarray view containing a single element.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @returns {ndarrayLike} broadcasted ndarray view\n*/\nfunction broadcast( x ) {\n\t// NOTE: the following properties must be set in the exact same order as in `x` in order to ensure that the returned object has the same hidden shape as the input ndarray-like object...\n\treturn {\n\t\t'dtype': x.dtype,\n\t\t'data': x.data,\n\t\t'shape': [ 1 ],\n\t\t'strides': [ 0 ],\n\t\t'offset': x.offset,\n\t\t'order': x.order\n\t};\n}\n\n/**\n* Returns a function which returns an ndarray view in which the singleton dimensions are removed from an input ndarray having only a single non-singleton dimension.\n*\n* @private\n* @param {ndarrayLike} arr - original ndarray\n* @param {NonNegativeInteger} index - index of the non-singleton dimension\n* @returns {Function} function for returning an ndarray view\n*/\nfunction squeeze( arr, index ) {\n\tvar sh = [ arr.shape[ index ] ];\n\tvar sx = [ arr.strides[ index ] ];\n\treturn reshape;\n\n\t/**\n\t* Returns an ndarray view in which the singleton dimensions are removed from an input ndarray having only a single non-singleton dimension.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} a squeezed ndarray view\n\t*/\n\tfunction reshape( x ) {\n\t\t// NOTE: the following properties must be set in the exact same order as in `arr` in order to ensure that the returned object has the same hidden shape as the input ndarray-like object...\n\t\treturn {\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': sh,\n\t\t\t'strides': sx,\n\t\t\t'offset': x.offset,\n\t\t\t'order': x.order\n\t\t};\n\t}\n}\n\n/**\n* Returns a function which returns a one-dimensional ndarray view of a contiguous input ndarray having more than one dimension.\n*\n* @private\n* @param {NonNegativeInteger} len - number of elements in an ndarray\n* @param {integer} iox - iteration order\n* @returns {Function} function for returning a one-dimensional ndarray view\n*/\nfunction contiguous( len, iox ) {\n\tvar xmmv;\n\tvar ind;\n\tvar sh;\n\tvar sx;\n\n\t// Resolve the index of the min/max view buffer element which is the first indexed element...\n\tif ( iox === 1 ) {\n\t\tind = 0;\n\t} else {\n\t\tind = 1;\n\t}\n\t// Initialize an array for storing the min/max view buffer elements:\n\txmmv = [ 0, 0 ]; // [ min, max ]\n\n\t// Initialize the output one-dimensional view's shape and strides:\n\tsh = [ len ];\n\tsx = [ iox ];\n\n\treturn reshape;\n\n\t/**\n\t* Returns a one-dimensional ndarray view of a contiguous input ndarray having more than one dimension.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} a one-dimensional ndarray view\n\t*/\n\tfunction reshape( x ) {\n\t\t// Resolve the minimum and maximum linear indices in the underlying data buffer which are accessible to the input ndarray view:\n\t\tminmaxViewBufferIndex( x.shape, x.strides, x.offset, xmmv );\n\n\t\t// NOTE: the following properties must be set in the exact same order as in `x` in order to ensure that the returned object has the same hidden shape as the input ndarray-like object...\n\t\treturn {\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': sh,\n\t\t\t'strides': sx,\n\t\t\t'offset': xmmv[ ind ], // the index of the first indexed element\n\t\t\t'order': x.order\n\t\t};\n\t}\n}\n\n/**\n* Returns a function which copies an input ndarray to a contiguous ndarray workspace.\n*\n* @private\n* @param {NonNegativeInteger} len - number of elements in an ndarray\n* @param {ndarrayLike} workspace - ndarray workspace\n* @returns {Function} function which copies an input ndarray to a contiguous ndarray workspace\n*/\nfunction copy( len, workspace ) {\n\t// NOTE: the following properties must be set in the exact same order as in the input ndarray-like object in order to ensure that the returned object has the same hidden shape...\n\tvar view = {\n\t\t'dtype': workspace.dtype,\n\t\t'data': workspace.data,\n\t\t'shape': [ len ],\n\t\t'strides': [ 1 ],\n\t\t'offset': workspace.offset,\n\t\t'order': workspace.order\n\t};\n\treturn reshape;\n\n\t/**\n\t* Copies an input ndarray to a contiguous ndarray workspace and returns a one-dimensional workspace view.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} one-dimensional workspace view\n\t*/\n\tfunction reshape( x ) {\n\t\tassign( [ x, workspace ] );\n\t\treturn view;\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Returns a function for reshaping input ndarrays which have the same data type, shape, and strides as a provided ndarray.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @param {string} x.dtype - input ndarray data type\n* @param {Collection} x.data - input ndarray data buffer\n* @param {NonNegativeIntegerArray} x.shape - input ndarray shape\n* @param {IntegerArray} x.strides - input ndarray strides\n* @param {NonNegativeInteger} x.offset - input ndarray index offset\n* @param {string} x.order - input ndarray memory layout\n* @returns {Function} function implementing a reshape strategy\n*/\nfunction strategy( x ) {\n\tvar ndims;\n\tvar xmmv;\n\tvar len;\n\tvar iox;\n\tvar sh;\n\tvar ns;\n\tvar i;\n\n\t// Resolve the number of array dimensions:\n\tsh = x.shape;\n\tndims = sh.length;\n\n\t// Check whether the ndarray is zero-dimensional...\n\tif ( ndims === 0 ) {\n\t\treturn broadcast;\n\t}\n\t// Check whether the ndarray is already one-dimensional...\n\tif ( ndims === 1 ) {\n\t\treturn identity;\n\t}\n\t// Determine the number of singleton dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( sh[ i ] === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t\tlen *= sh[ i ];\n\t}\n\t// Determine whether the ndarray has only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can simply create an ndarray view without the singleton dimensions...\n\tif ( ns === ndims-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tif ( sh[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn squeeze( x, i );\n\t}\n\tiox = iterationOrder( x.strides ); // +/-1\n\n\t// Determine whether we can avoid copying data...\n\tif ( iox !== 0 ) {\n\t\t// Determine the minimum and maximum linear indices which are accessible by the ndarray view:\n\t\txmmv = minmaxViewBufferIndex( sh, x.strides, x.offset, [ 0, 0 ] );\n\n\t\t// Determine whether we can ignore shape (and strides) and create a new one-dimensional ndarray view...\n\t\tif ( len === ( xmmv[1]-xmmv[0]+1 ) ) {\n\t\t\treturn contiguous( len, iox );\n\t\t}\n\t\t// The ndarray is non-contiguous, so we cannot directly interpret as a one-dimensional ndarray...\n\n\t\t// Fall-through to copying to a workspace ndarray...\n\t}\n\t// At this point, we're dealing with a non-contiguous multi-dimensional ndarray, so we need to copy to a contiguous workspace:\n\treturn copy( len, ndarraylike2object( emptyLike( ndarraylike2ndarray( x ) ) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = strategy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Increments index offsets according to a list of increments.\n*\n* ## Notes\n*\n* -   This function mutates the list of index offsets.\n*\n* @private\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @param {NonNegativeIntegerArray} inc - list of increments\n* @returns {NonNegativeIntegerArray} updated offsets\n*/\nfunction incrementOffsets( offsets, inc ) {\n\tvar i;\n\tfor ( i = 0; i < offsets.length; i++ ) {\n\t\toffsets[ i ] += inc[ i ];\n\t}\n\treturn offsets;\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrementOffsets;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets view offsets according to a list of index offsets.\n*\n* ## Notes\n*\n* -   This function skips the second element in the list of index offsets, as that is assumed to correspond to the output ndarray which does not have a corresponding view. Meaning, the list of views is expected to have `N` elements, and the list of index offsets is expected to have `N+1` elements.\n* -   This function mutates the provides view objects.\n*\n* @private\n* @param {Array<Object>} views - list of ndarray-like objects representing ndarray views\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @returns {Array<Object>} updated views\n*/\nfunction setViewOffsets( views, offsets ) {\n\tvar i;\n\tvar j;\n\tfor ( i = 0, j = 0; i < offsets.length; i++ ) {\n\t\tif ( i === 1 ) { // note: expected to correspond to the output ndarray which does not have a corresponding view\n\t\t\tcontinue;\n\t\t}\n\t\tviews[ j ].offset = offsets[ i ];\n\t\tj += 1;\n\t}\n\treturn views;\n}\n\n\n// EXPORTS //\n\nmodule.exports = setViewOffsets;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Resolves index offsets from a list of ndarray-like objects.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @returns {NonNegativeIntegerArray} list of offsets\n*/\nfunction offsets( arrays ) {\n\tvar out = [];\n\tvar i;\n\tfor ( i = 0; i < arrays.length; i++ ) {\n\t\tout.push( arrays[ i ].offset );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = offsets;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary2d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ]\n*/\nfunction blockedunary2d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar ov1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tdv1 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov1[ k ] = ov[k] + ( j1*sv[k][1] );\n\t\t}\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t}\n\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\tfcn( v, opts );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary3d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ] ]\n*/\nfunction blockedunary3d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar ov1;\n\tvar ov2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov2[ k ] = ov[k] + ( j2*sv[k][2] );\n\t\t}\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t}\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t}\n\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\tfcn( v, opts );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary4d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ] ] ]\n*/\nfunction blockedunary4d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov3[ k ] = ov[k] + ( j3*sv[k][3] );\n\t\t}\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t}\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t}\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t}\n\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\tfcn( v, opts );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary5d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ] ] ] ]\n*/\nfunction blockedunary5d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov4[ k ] = ov[k] + ( j4*sv[k][4] );\n\t\t}\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t}\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t}\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\tfcn( v, opts );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary6d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ] ] ] ] ]\n*/\nfunction blockedunary6d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov5[ k ] = ov[k] + ( j5*sv[k][5] );\n\t\t}\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t}\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t}\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\tfcn( v, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary7d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ] ] ] ] ] ]\n*/\nfunction blockedunary7d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov6[ k ] = ov[k] + ( j6*sv[k][6] );\n\t\t}\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t}\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t}\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfcn( v, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary8d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary8d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov7[ k ] = ov[k] + ( j7*sv[k][7] );\n\t\t}\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t}\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t}\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfcn( v, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary9d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary9d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov8[ k ] = ov[k] + ( j8*sv[k][8] );\n\t\t}\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t}\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t}\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfcn( v, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* blockedunary10d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary10d( fcn, arrays, views, strides, strategy, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar ov9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tov9 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tdv9 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov9[ k ] = ov[k] + ( j9*sv[k][9] );\n\t\t}\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv9 = sv[k][9] - ( s8*sv[k][8] );\n\t\t\t\tov8[ k ] = ov9[k] + ( j8*sv[k][8] );\n\t\t\t}\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t\t}\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfcn( v, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv9 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Performs a reduction over a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var ybuf = new ResultsArray( 1 );\n*\n* // Define the array shapes:\n* var xsh = [ 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary0d( ztest, [ x, y, alternative, alpha, mu, sigma ], strategy, {} );\n*\n* var v = y.data.get( 0 );\n* // returns <Float64Results>\n*/\nfunction unary0d( fcn, arrays, strategy, opts ) {\n\tarrays[ 0 ] = strategy( arrays[ 0 ] );\n\tfcn( arrays, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary0d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary1d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ <Float64Results>, <Float64Results>, <Float64Results> ]\n*/\nfunction unary1d( fcn, arrays, views, strides, strategy, opts ) {\n\tvar dv0;\n\tvar sh;\n\tvar S0;\n\tvar iv;\n\tvar i0;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output shape:\n\tsh = arrays[ 1 ].shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tS0 = sh[ 0 ];\n\tdv0 = [ strides[0] ];\n\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\tdv0.push( arrays[i].strides[0] );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tsetViewOffsets( views, iv );\n\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\tfcn( v, opts );\n\t\tincrementOffsets( iv, dv0 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary1d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary2d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 12, 4 ], true, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ]\n*/\nfunction unary2d( fcn, arrays, views, strides, isRowMajor, strategy, opts ) {\n\tvar dv0;\n\tvar dv1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output shape:\n\tsh = arrays[ 1 ].shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdv0 = [ strides[1] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[0] - ( S0*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[1] );\n\t\t\tdv1.push( sv[0] - ( S0*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tsetViewOffsets( views, iv );\n\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\tfcn( v, opts );\n\t\t\tincrementOffsets( iv, dv0 );\n\t\t}\n\t\tincrementOffsets( iv, dv1 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary3d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 12, 12, 4 ], true, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ] ]\n*/\nfunction unary3d( fcn, arrays, views, strides, isRowMajor, strategy, opts ) {\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output shape:\n\tsh = arrays[ 1 ].shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdv0 = [ strides[2] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[2] ) ];\n\t\tdv2 = [ strides[0] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[2] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[2] ) );\n\t\t\tdv2.push( sv[0] - ( S1*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\tfcn( v, opts );\n\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv1 );\n\t\t}\n\t\tincrementOffsets( iv, dv2 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary4d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 12, 12, 12, 4 ], true, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ] ] ]\n*/\nfunction unary4d( fcn, arrays, views, strides, isRowMajor, strategy, opts ) {\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output shape:\n\tsh = arrays[ 1 ].shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdv0 = [ strides[3] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[2] - ( S0*strides[3] ) ];\n\t\tdv2 = [ strides[1] - ( S1*strides[2] ) ];\n\t\tdv3 = [ strides[0] - ( S2*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[3] );\n\t\t\tdv1.push( sv[2] - ( S0*sv[3] ) );\n\t\t\tdv2.push( sv[1] - ( S1*sv[2] ) );\n\t\t\tdv3.push( sv[0] - ( S2*sv[1]) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\tfcn( v, opts );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv2 );\n\t\t}\n\t\tincrementOffsets( iv, dv3 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary5d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 12, 12, 12, 12, 4 ], true, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ] ] ] ]\n*/\nfunction unary5d( fcn, arrays, views, strides, isRowMajor, strategy, opts ) {\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output shape:\n\tsh = arrays[ 1 ].shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdv0 = [ strides[4] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[3] - ( S0*strides[4] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[3] ) ];\n\t\tdv3 = [ strides[1] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[0] - ( S3*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[4] );\n\t\t\tdv1.push( sv[3] - ( S0*sv[4] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[3] ) );\n\t\t\tdv3.push( sv[1] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[0] - ( S3*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\tfcn( v, opts );\n\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv3 );\n\t\t}\n\t\tincrementOffsets( iv, dv4 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary6d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 12, 12, 12, 12, 12, 4 ], true, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ] ] ] ] ]\n*/\nfunction unary6d( fcn, arrays, views, strides, isRowMajor, strategy, opts ) {\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output shape:\n\tsh = arrays[ 1 ].shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdv0 = [ strides[5] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[4] - ( S0*strides[5] ) ];\n\t\tdv2 = [ strides[3] - ( S1*strides[4] ) ];\n\t\tdv3 = [ strides[2] - ( S2*strides[3] ) ];\n\t\tdv4 = [ strides[1] - ( S3*strides[2] ) ];\n\t\tdv5 = [ strides[0] - ( S4*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[5] );\n\t\t\tdv1.push( sv[4] - ( S0*sv[5] ) );\n\t\t\tdv2.push( sv[3] - ( S1*sv[4] ) );\n\t\t\tdv3.push( sv[2] - ( S2*sv[3] ) );\n\t\t\tdv4.push( sv[1] - ( S3*sv[2] ) );\n\t\t\tdv5.push( sv[0] - ( S4*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\tfcn( v, opts );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv4 );\n\t\t}\n\t\tincrementOffsets( iv, dv5 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary7d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 12, 12, 12, 12, 12, 12, 4 ], true, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ] ] ] ] ] ]\n*/\nfunction unary7d( fcn, arrays, views, strides, isRowMajor, strategy, opts ) {\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output shape:\n\tsh = arrays[ 1 ].shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdv0 = [ strides[6] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[5] - ( S0*strides[6] ) ];\n\t\tdv2 = [ strides[4] - ( S1*strides[5] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[4] ) ];\n\t\tdv4 = [ strides[2] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[1] - ( S4*strides[2] ) ];\n\t\tdv6 = [ strides[0] - ( S5*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[6] );\n\t\t\tdv1.push( sv[5] - ( S0*sv[6] ) );\n\t\t\tdv2.push( sv[4] - ( S1*sv[5] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[4] ) );\n\t\t\tdv4.push( sv[2] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[1] - ( S4*sv[2] ) );\n\t\t\tdv6.push( sv[0] - ( S5*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\tfcn( v, opts );\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv5 );\n\t\t}\n\t\tincrementOffsets( iv, dv6 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary8d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 12, 12, 12, 12, 12, 12, 12, 4 ], true, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ] ] ] ] ] ] ]\n*/\nfunction unary8d( fcn, arrays, views, strides, isRowMajor, strategy, opts ) { // eslint-disable-line max-statements\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output shape:\n\tsh = arrays[ 1 ].shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdv0 = [ strides[7] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[6] - ( S0*strides[7] ) ];\n\t\tdv2 = [ strides[5] - ( S1*strides[6] ) ];\n\t\tdv3 = [ strides[4] - ( S2*strides[5] ) ];\n\t\tdv4 = [ strides[3] - ( S3*strides[4] ) ];\n\t\tdv5 = [ strides[2] - ( S4*strides[3] ) ];\n\t\tdv6 = [ strides[1] - ( S5*strides[2] ) ];\n\t\tdv7 = [ strides[0] - ( S6*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[7] );\n\t\t\tdv1.push( sv[6] - ( S0*sv[7] ) );\n\t\t\tdv2.push( sv[5] - ( S1*sv[6] ) );\n\t\t\tdv3.push( sv[4] - ( S2*sv[5] ) );\n\t\t\tdv4.push( sv[3] - ( S3*sv[4] ) );\n\t\t\tdv5.push( sv[2] - ( S4*sv[3] ) );\n\t\t\tdv6.push( sv[1] - ( S5*sv[2] ) );\n\t\t\tdv7.push( sv[0] - ( S6*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\tfcn( v, opts );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv6 );\n\t\t}\n\t\tincrementOffsets( iv, dv7 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary9d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], true, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ] ] ] ] ] ] ] ]\n*/\nfunction unary9d( fcn, arrays, views, strides, isRowMajor, strategy, opts ) { // eslint-disable-line max-statements\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output shape:\n\tsh = arrays[ 1 ].shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdv0 = [ strides[8] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[7] - ( S0*strides[8] ) ];\n\t\tdv2 = [ strides[6] - ( S1*strides[7] ) ];\n\t\tdv3 = [ strides[5] - ( S2*strides[6] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[5] ) ];\n\t\tdv5 = [ strides[3] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[2] - ( S5*strides[3] ) ];\n\t\tdv7 = [ strides[1] - ( S6*strides[2] ) ];\n\t\tdv8 = [ strides[0] - ( S7*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[8] );\n\t\t\tdv1.push( sv[7] - ( S0*sv[8] ) );\n\t\t\tdv2.push( sv[6] - ( S1*sv[7] ) );\n\t\t\tdv3.push( sv[5] - ( S2*sv[6] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[5] ) );\n\t\t\tdv5.push( sv[3] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[2] - ( S5*sv[3] ) );\n\t\t\tdv7.push( sv[1] - ( S6*sv[2] ) );\n\t\t\tdv8.push( sv[0] - ( S7*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\tfcn( v, opts );\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv7 );\n\t\t}\n\t\tincrementOffsets( iv, dv8 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unary10d( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], true, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary10d( fcn, arrays, views, strides, isRowMajor, strategy, opts ) { // eslint-disable-line max-statements\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output shape:\n\tsh = arrays[ 1 ].shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdv0 = [ strides[9] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[8] - ( S0*strides[9] ) ];\n\t\tdv2 = [ strides[7] - ( S1*strides[8] ) ];\n\t\tdv3 = [ strides[6] - ( S2*strides[7] ) ];\n\t\tdv4 = [ strides[5] - ( S3*strides[6] ) ];\n\t\tdv5 = [ strides[4] - ( S4*strides[5] ) ];\n\t\tdv6 = [ strides[3] - ( S5*strides[4] ) ];\n\t\tdv7 = [ strides[2] - ( S6*strides[3] ) ];\n\t\tdv8 = [ strides[1] - ( S7*strides[2] ) ];\n\t\tdv9 = [ strides[0] - ( S8*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[9] );\n\t\t\tdv1.push( sv[8] - ( S0*sv[9] ) );\n\t\t\tdv2.push( sv[7] - ( S1*sv[8] ) );\n\t\t\tdv3.push( sv[6] - ( S2*sv[7] ) );\n\t\t\tdv4.push( sv[5] - ( S3*sv[6] ) );\n\t\t\tdv5.push( sv[4] - ( S4*sv[5] ) );\n\t\t\tdv6.push( sv[3] - ( S5*sv[4] ) );\n\t\t\tdv7.push( sv[2] - ( S6*sv[3] ) );\n\t\t\tdv8.push( sv[1] - ( S7*sv[2] ) );\n\t\t\tdv9.push( sv[0] - ( S8*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ];\n\t\tdv9 = [ strides[9] - ( S8*strides[8] ) ];  // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t\tdv9.push( sv[9] - ( S8*sv[8] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\tfcn( v, opts );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv8 );\n\t\t}\n\t\tincrementOffsets( iv, dv9 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar vind2bind = require( '@stdlib/ndarray-base-vind2bind' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': alternative.dtype,\n*         'data': alternative.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alternative.offset,\n*         'order': alternative.order\n*     },\n*     {\n*         'dtype': alpha.dtype,\n*         'data': alpha.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': alpha.offset,\n*         'order': alpha.order\n*     },\n*     {\n*         'dtype': mu.dtype,\n*         'data': mu.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': mu.offset,\n*         'order': mu.order\n*     },\n*     {\n*         'dtype': sigma.dtype,\n*         'data': sigma.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': sigma.offset,\n*         'order': sigma.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Perform a reduction:\n* unarynd( ztest, [ x, y, alternative, alpha, mu, sigma ], views, [ 4 ], strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ <Float64Results>, <Float64Results>, <Float64Results> ]\n*/\nfunction unarynd( fcn, arrays, views, strides, strategy, opts ) {\n\tvar len;\n\tvar arr;\n\tvar sh;\n\tvar iv;\n\tvar io;\n\tvar N;\n\tvar v;\n\tvar i;\n\tvar j;\n\n\tN = arrays.length;\n\n\t// Resolve the output ndarray and associated shape:\n\tsh = arrays[ 1 ].shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate based on the linear **view** index, regardless as to how the data is stored in memory...\n\tio = zeros( N );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tarr = arrays[ j ];\n\t\t\tio[ j ] = vind2bind( sh, arr.strides, iv[ j ], arr.order, i, MODE );\n\t\t}\n\t\tsetViewOffsets( views, io );\n\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\tfcn( v, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unarynd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ndarray2object = require( '@stdlib/ndarray-base-ndarraylike2object' );\nvar normalizeIndices = require( '@stdlib/ndarray-base-to-unique-normalized-indices' );\nvar indicesComplement = require( '@stdlib/array-base-indices-complement' );\nvar takeIndexed2 = require( '@stdlib/array-base-take-indexed2' );\nvar iterationOrder = require( '@stdlib/ndarray-base-iteration-order' );\nvar strides2order = require( '@stdlib/ndarray-base-strides2order' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar join = require( '@stdlib/array-base-join' );\nvar format = require( '@stdlib/string-format' );\nvar initializeViews = require( './initialize_array_views.js' );\nvar reshapeStrategy = require( './reshape_strategy.js' );\nvar blockedunary2d = require( './2d_blocked.js' );\nvar blockedunary3d = require( './3d_blocked.js' );\nvar blockedunary4d = require( './4d_blocked.js' );\nvar blockedunary5d = require( './5d_blocked.js' );\nvar blockedunary6d = require( './6d_blocked.js' );\nvar blockedunary7d = require( './7d_blocked.js' );\nvar blockedunary8d = require( './8d_blocked.js' );\nvar blockedunary9d = require( './9d_blocked.js' );\nvar blockedunary10d = require( './10d_blocked.js' );\nvar unary0d = require( './0d.js' );\nvar unary1d = require( './1d.js' );\nvar unary2d = require( './2d.js' );\nvar unary3d = require( './3d.js' );\nvar unary4d = require( './4d.js' );\nvar unary5d = require( './5d.js' );\nvar unary6d = require( './6d.js' );\nvar unary7d = require( './7d.js' );\nvar unary8d = require( './8d.js' );\nvar unary9d = require( './9d.js' );\nvar unary10d = require( './10d.js' );\nvar unarynd = require( './nd.js' );\n\n\n// VARIABLES //\n\nvar UNARY = [\n\tunary0d,\n\tunary1d,\n\tunary2d,\n\tunary3d,\n\tunary4d,\n\tunary5d,\n\tunary6d,\n\tunary7d,\n\tunary8d,\n\tunary9d,\n\tunary10d\n];\nvar BLOCKED_UNARY = [\n\tblockedunary2d, // 0\n\tblockedunary3d,\n\tblockedunary4d,\n\tblockedunary5d,\n\tblockedunary6d,\n\tblockedunary7d,\n\tblockedunary8d,\n\tblockedunary9d,\n\tblockedunary10d // 8\n];\nvar MAX_DIMS = UNARY.length - 1;\n\n\n// MAIN //\n\n/**\n* Performs a reduction over a list of specified dimensions in an input ndarray via a one-dimensional strided array reduction function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n* @param {IntegerArray} dims - list of dimensions over which to perform a reduction\n* @param {Options} [options] - function options\n* @throws {Error} arrays must have the expected number of dimensions\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide unique dimension indices\n* @throws {Error} arrays must have the same loop dimension sizes\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceStrided1d( ztest, [ x, y, alternative, alpha, mu, sigma ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 1 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceStrided1d( ztest, [ x, y, alternative, alpha, mu, sigma ], [ 0, 1, 2, 3 ] );\n*\n* var v = y.data.get( 0 );\n* // returns <Float64Results>\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 12 );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceStrided1d( ztest, [ x, y, alternative, alpha, mu, sigma ], [] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ <Float64Results>, <Float64Results> ], [ <Float64Results>, <Float64Results> ] ], [ [ <Float64Results>, <Float64Results> ], [ <Float64Results>, <Float64Results> ] ], [ [ <Float64Results>, <Float64Results> ], [ <Float64Results>, <Float64Results> ] ] ]\n*/\nfunction unaryReduceStrided1d( fcn, arrays, dims, options ) {\n\tvar strategy;\n\tvar views;\n\tvar ndims;\n\tvar ldims;\n\tvar opts;\n\tvar arr;\n\tvar tmp;\n\tvar len;\n\tvar shx;\n\tvar shc;\n\tvar shl;\n\tvar iox;\n\tvar ioy;\n\tvar ord;\n\tvar sc;\n\tvar sl;\n\tvar sy;\n\tvar ns;\n\tvar d;\n\tvar s;\n\tvar N;\n\tvar M;\n\tvar K;\n\tvar x;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tif ( arguments.length > 3 ) {\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\t// Standardize ndarray meta data...\n\tN = arrays.length;\n\tarr = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tarr.push( ndarray2object( arrays[ i ] ) );\n\t}\n\t// Cache references to the input and output arrays:\n\tx = arr[ 0 ];\n\ty = arr[ 1 ];\n\n\t// Resolve the number of input array dimensions:\n\tshx = x.shape;\n\tndims = shx.length;\n\n\t// Verify that we've been provided a list of unique dimension indices...\n\tM = dims.length;\n\td = normalizeIndices( dims, ndims-1 );\n\tif ( d === null ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument contains an out-of-bounds dimension index. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\td.sort();\n\tif ( d.length !== M ) {\n\t\tthrow new Error( format( 'invalid argument. Third argument must contain a list of unique dimension indices. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\t// Check whether we've been provided a valid number of dimensions to reduce...\n\tif ( M > ndims ) {\n\t\tthrow new RangeError( format( 'invalid argument. Number of specified dimensions cannot exceed the number of dimensions in the input array. Number of dimensions: %d. Value: [%s].', ndims, join( dims, ',' ) ) );\n\t}\n\t// Verify that provided ndarrays have the expected number of dimensions...\n\tK = ndims - M;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tif ( arr[ i ].shape.length !== K ) {\n\t\t\tthrow new Error( format( 'invalid argument. Arrays which are not being reduced must have the same number of non-reduced dimensions. Input array shape: [%s]. Number of non-reduced dimensions: %d. Array shape: [%s] (index: %d).', join( shx, ',' ), K, join( arr[ i ].shape, ',' ), i ) );\n\t\t}\n\t}\n\t// Resolve the non-reduced (\"loop\") dimensions and associated strides:\n\tldims = indicesComplement( shx.length, d );\n\ttmp = takeIndexed2( shx, x.strides, ldims );\n\tshl = tmp[ 0 ];\n\tsl = tmp[ 1 ];\n\n\t// Resolve the reduced (\"core\") dimensions and associated strides:\n\ttmp = takeIndexed2( shx, x.strides, d );\n\tshc = tmp[ 0 ];\n\tsc = tmp[ 1 ];\n\n\t// Verify that the provided arrays have the same loop dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < K; i++ ) {\n\t\ts = shl[ i ];\n\t\tfor ( j = 1; j < N; j++ ) {\n\t\t\tif ( s !== arr[ j ].shape[ i ] ) {\n\t\t\t\tthrow new Error( format( 'invalid argument. Non-reduced dimensions must be consistent across all provided arrays. Input array shape: [%s]. Non-reduced dimension indices: [%s]. Non-reduced dimensions: [%s]. Array shape: [%s] (index: %d).', join( shx, ',' ), join( ldims, ',' ), join( shl, ',' ), join( arr[ j ].shape, ',' ), j ) );\n\t\t\t}\n\t\t}\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= s;\n\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( s === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t}\n\t// Check whether we were provided empty ndarrays...\n\tif ( len === 0 || ( shc.length && numel( shc ) === 0 ) ) {\n\t\treturn;\n\t}\n\t// Initialize ndarray-like objects for representing sub-array views...\n\tviews = [\n\t\t{\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': shc,\n\t\t\t'strides': sc,\n\t\t\t'offset': x.offset,\n\t\t\t'order': x.order\n\t\t}\n\t];\n\tinitializeViews( arr, views );\n\n\t// Determine the strategy for reshaping sub-array views of the input array prior to performing a reduction:\n\tstrategy = reshapeStrategy( views[ 0 ] );\n\n\t// Determine whether we can avoid iteration altogether...\n\tif ( K === 0 ) {\n\t\treturn UNARY[ K ]( fcn, arr, strategy, opts );\n\t}\n\t// Determine whether we only have one loop dimension and can thus readily perform one-dimensional iteration...\n\tif ( K === 1 ) {\n\t\treturn UNARY[ K ]( fcn, arr, views, sl, strategy, opts );\n\t}\n\tsy = y.strides;\n\n\t// Determine whether the loop dimensions have only **one** non-singleton dimension (e.g., shape=[10,1,1,1]) so that we can treat loop iteration as being equivalent to one-dimensional iteration...\n\tif ( ns === K-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < K; i++ ) {\n\t\t\tif ( shl[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ty.shape = [ shl[i] ];\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tarr[ j ].strides = [ arr[j].strides[i] ];\n\t\t}\n\t\tsl = [ sl[i] ];\n\t\treturn UNARY[ 1 ]( fcn, arr, views, sl, strategy, opts );\n\t}\n\tiox = iterationOrder( sl ); // +/-1\n\tioy = iterationOrder( sy ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tord = strides2order( sl );\n\tif ( iox !== 0 && ioy !== 0 && ord === strides2order( sy ) && K <= MAX_DIMS ) { // eslint-disable-line max-len\n\t\t// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides) and the memory layouts are the same, we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\treturn UNARY[ K ]( fcn, arr, views, sl, ord === 1, strategy, opts );\n\t}\n\t// At this point, we're either dealing with non-contiguous n-dimensional arrays, high dimensional n-dimensional arrays, and/or arrays having differing memory layouts, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( K <= MAX_DIMS ) {\n\t\treturn BLOCKED_UNARY[ K-2 ]( fcn, arr, views, sl, strategy, opts );\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tunarynd( fcn, arr, views, sl, strategy, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unaryReduceStrided1d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar format = require( '@stdlib/string-format' );\nvar reduce = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Return a function for performing a reduction over a list of specified dimensions in an input ndarray via a one-dimensional strided array reduction function and assigning results to a provided output ndarray.\n*\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @throws {TypeError} first argument must be a function\n* @returns {Function} function for performing a reduction\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var base = require( '@stdlib/stats-base-ndarray-ztest' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create a function for performing a reduction over subarrays:\n* var ztest = factory( base );\n* // returns <Function>\n*\n* // Perform a reduction:\n* ztest( [ x, y, alternative, alpha, mu, sigma ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ]\n*/\nfunction factory( fcn ) {\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\treturn reducer;\n\n\t/**\n\t* Performs a reduction over a list of specified dimensions in an input ndarray via a one-dimensional strided array reduction function and assigns results to a provided output ndarray.\n\t*\n\t* @private\n\t* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n\t* @param {IntegerArray} dims - list of dimensions over which to perform a reduction\n\t* @param {Options} [options] - function options\n\t* @returns {void}\n\t*/\n\tfunction reducer( arrays, dims, options ) {\n\t\tvar opts;\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = options;\n\t\t} else {\n\t\t\topts = {};\n\t\t}\n\t\treturn reduce( fcn, arrays, dims, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Perform a reduction over a list of specified dimensions in an input ndarray via a one-dimensional strided array reduction function and assign results to a provided output ndarray.\n*\n* @module @stdlib/ndarray-base-unary-reduce-strided1d-to-struct\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var ztest = require( '@stdlib/stats-base-ndarray-ztest' );\n* var unaryReduceStrided1d = require( '@stdlib/ndarray-base-unary-reduce-strided1d-to-struct' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceStrided1d( ztest, [ x, y, alternative, alpha, mu, sigma ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var Float64Results = require( '@stdlib/stats-base-ztest-one-sample-results-float64' );\n* var structFactory = require( '@stdlib/array-struct-factory' );\n* var base = require( '@stdlib/stats-base-ndarray-ztest' );\n* var unaryReduceStrided1d = require( '@stdlib/ndarray-base-unary-reduce-strided1d-to-struct' );\n*\n* var ResultsArray = structFactory( Float64Results );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new ResultsArray( 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': Float64Results,\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create additional parameter ndarray-like objects:\n* var alternative = {\n*     'dtype': 'generic',\n*     'data': [ 'two-sided' ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n};\n* var alpha = {\n*     'dtype': 'float64',\n*     'data': [ 0.05 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var mu = {\n*     'dtype': 'float64',\n*     'data': [ 0.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n* var sigma = {\n*     'dtype': 'float64',\n*     'data': [ 1.0 ],\n*     'shape': ysh,\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create a function for performing a reduction over subarrays:\n* var ztest = unaryReduceStrided1d.factory( base );\n* // returns <Function>\n*\n* // Perform a reduction:\n* ztest( [ x, y, alternative, alpha, mu, sigma ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ <Float64Results>, <Float64Results>, <Float64Results> ] ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\" }\n"],
  "mappings": "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",
  "names": ["require_initialize_array_views", "__commonJSMin", "exports", "module", "initializeViews", "arrays", "out", "v", "i", "require_reshape_strategy", "__commonJSMin", "exports", "module", "iterationOrder", "minmaxViewBufferIndex", "ndarraylike2object", "assign", "ndarraylike2ndarray", "emptyLike", "identity", "x", "broadcast", "squeeze", "arr", "index", "sh", "sx", "reshape", "contiguous", "len", "iox", "xmmv", "ind", "copy", "workspace", "view", "strategy", "ndims", "ns", "i", "require_increment_offsets", "__commonJSMin", "exports", "module", "incrementOffsets", "offsets", "inc", "require_set_view_offsets", "__commonJSMin", "exports", "module", "setViewOffsets", "views", "offsets", "j", "require_offsets", "__commonJSMin", "exports", "module", "offsets", "arrays", "out", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary2d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "dv0", "dv1", "ov1", "sh", "s0", "s1", "sv", "ov", "iv", "i0", "i1", "j0", "j1", "N", "x", "y", "v", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary3d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "dv0", "dv1", "dv2", "ov1", "ov2", "sh", "s0", "s1", "s2", "sv", "ov", "iv", "i0", "i1", "i2", "j0", "j1", "j2", "N", "x", "y", "v", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary4d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "dv0", "dv1", "dv2", "dv3", "ov1", "ov2", "ov3", "sh", "s0", "s1", "s2", "s3", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "j0", "j1", "j2", "j3", "N", "x", "y", "v", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary5d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "dv0", "dv1", "dv2", "dv3", "dv4", "ov1", "ov2", "ov3", "ov4", "sh", "s0", "s1", "s2", "s3", "s4", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "j0", "j1", "j2", "j3", "j4", "N", "x", "y", "v", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary6d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "ov1", "ov2", "ov3", "ov4", "ov5", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "j0", "j1", "j2", "j3", "j4", "j5", "N", "x", "y", "v", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary7d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "N", "x", "y", "v", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary8d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "N", "x", "y", "v", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary9d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "ov8", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "N", "x", "y", "v", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary10d", "fcn", "arrays", "views", "strides", "strategy", "opts", "bsize", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "dv9", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "ov8", "ov9", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "j9", "N", "x", "y", "v", "o", "k", "require_d", "__commonJSMin", "exports", "module", "unary0d", "fcn", "arrays", "strategy", "opts", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "unary1d", "fcn", "arrays", "views", "strides", "strategy", "opts", "dv0", "sh", "S0", "iv", "i0", "v", "i", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "unary2d", "fcn", "arrays", "views", "strides", "isRowMajor", "strategy", "opts", "dv0", "dv1", "sh", "S0", "S1", "sv", "iv", "i0", "i1", "v", "i", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "unary3d", "fcn", "arrays", "views", "strides", "isRowMajor", "strategy", "opts", "dv0", "dv1", "dv2", "sh", "S0", "S1", "S2", "sv", "iv", "i0", "i1", "i2", "v", "i", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "unary4d", "fcn", "arrays", "views", "strides", "isRowMajor", "strategy", "opts", "dv0", "dv1", "dv2", "dv3", "sh", "S0", "S1", "S2", "S3", "sv", "iv", "i0", "i1", "i2", "i3", "v", "i", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "unary5d", "fcn", "arrays", "views", "strides", "isRowMajor", "strategy", "opts", "dv0", "dv1", "dv2", "dv3", "dv4", "sh", "S0", "S1", "S2", "S3", "S4", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "v", "i", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "unary6d", "fcn", "arrays", "views", "strides", "isRowMajor", "strategy", "opts", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "v", "i", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "unary7d", "fcn", "arrays", "views", "strides", "isRowMajor", "strategy", "opts", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "v", "i", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "unary8d", "fcn", "arrays", "views", "strides", "isRowMajor", "strategy", "opts", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "v", "i", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "unary9d", "fcn", "arrays", "views", "strides", "isRowMajor", "strategy", "opts", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "v", "i", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "unary10d", "fcn", "arrays", "views", "strides", "isRowMajor", "strategy", "opts", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "dv9", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "v", "i", "require_nd", "__commonJSMin", "exports", "module", "numel", "vind2bind", "copyIndexed", "zeros", "setViewOffsets", "offsets", "MODE", "unarynd", "fcn", "arrays", "views", "strides", "strategy", "opts", "len", "arr", "sh", "iv", "io", "N", "v", "i", "j", "require_main", "__commonJSMin", "exports", "module", "ndarray2object", "normalizeIndices", "indicesComplement", "takeIndexed2", "iterationOrder", "strides2order", "numel", "join", "format", "initializeViews", "reshapeStrategy", "blockedunary2d", "blockedunary3d", "blockedunary4d", "blockedunary5d", "blockedunary6d", "blockedunary7d", "blockedunary8d", "blockedunary9d", "blockedunary10d", "unary0d", "unary1d", "unary2d", "unary3d", "unary4d", "unary5d", "unary6d", "unary7d", "unary8d", "unary9d", "unary10d", "unarynd", "UNARY", "BLOCKED_UNARY", "MAX_DIMS", "unaryReduceStrided1d", "fcn", "arrays", "dims", "options", "strategy", "views", "ndims", "ldims", "opts", "arr", "tmp", "len", "shx", "shc", "shl", "iox", "ioy", "ord", "sc", "sl", "sy", "ns", "d", "s", "N", "M", "K", "x", "y", "i", "j", "require_factory", "__commonJSMin", "exports", "module", "isFunction", "format", "reduce", "factory", "fcn", "reducer", "arrays", "dims", "options", "opts", "setReadOnly", "main", "factory"]
}
